// Code generated by Pulumi SDK Generator DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package demo

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type Demo struct {
	pulumi.ResourceState
}

// NewDemo registers a new resource with the given unique name, arguments, and options.
func NewDemo(ctx *pulumi.Context,
	name string, args *DemoArgs, opts ...pulumi.ResourceOption) (*Demo, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.StaticPage == nil {
		return nil, errors.New("invalid value for required argument 'StaticPage'")
	}
	var resource Demo
	err := ctx.RegisterRemoteComponentResource("demo:index:Demo", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

type demoArgs struct {
	// The static page.
	StaticPage *StaticPage `pulumi:"staticPage"`
}

// The set of arguments for constructing a Demo resource.
type DemoArgs struct {
	// The static page.
	StaticPage StaticPageInput
}

func (DemoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*demoArgs)(nil)).Elem()
}

type DemoInput interface {
	pulumi.Input

	ToDemoOutput() DemoOutput
	ToDemoOutputWithContext(ctx context.Context) DemoOutput
}

func (*Demo) ElementType() reflect.Type {
	return reflect.TypeOf((**Demo)(nil)).Elem()
}

func (i *Demo) ToDemoOutput() DemoOutput {
	return i.ToDemoOutputWithContext(context.Background())
}

func (i *Demo) ToDemoOutputWithContext(ctx context.Context) DemoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DemoOutput)
}

// DemoArrayInput is an input type that accepts DemoArray and DemoArrayOutput values.
// You can construct a concrete instance of `DemoArrayInput` via:
//
//	DemoArray{ DemoArgs{...} }
type DemoArrayInput interface {
	pulumi.Input

	ToDemoArrayOutput() DemoArrayOutput
	ToDemoArrayOutputWithContext(context.Context) DemoArrayOutput
}

type DemoArray []DemoInput

func (DemoArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Demo)(nil)).Elem()
}

func (i DemoArray) ToDemoArrayOutput() DemoArrayOutput {
	return i.ToDemoArrayOutputWithContext(context.Background())
}

func (i DemoArray) ToDemoArrayOutputWithContext(ctx context.Context) DemoArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DemoArrayOutput)
}

// DemoMapInput is an input type that accepts DemoMap and DemoMapOutput values.
// You can construct a concrete instance of `DemoMapInput` via:
//
//	DemoMap{ "key": DemoArgs{...} }
type DemoMapInput interface {
	pulumi.Input

	ToDemoMapOutput() DemoMapOutput
	ToDemoMapOutputWithContext(context.Context) DemoMapOutput
}

type DemoMap map[string]DemoInput

func (DemoMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Demo)(nil)).Elem()
}

func (i DemoMap) ToDemoMapOutput() DemoMapOutput {
	return i.ToDemoMapOutputWithContext(context.Background())
}

func (i DemoMap) ToDemoMapOutputWithContext(ctx context.Context) DemoMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DemoMapOutput)
}

type DemoOutput struct{ *pulumi.OutputState }

func (DemoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Demo)(nil)).Elem()
}

func (o DemoOutput) ToDemoOutput() DemoOutput {
	return o
}

func (o DemoOutput) ToDemoOutputWithContext(ctx context.Context) DemoOutput {
	return o
}

type DemoArrayOutput struct{ *pulumi.OutputState }

func (DemoArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Demo)(nil)).Elem()
}

func (o DemoArrayOutput) ToDemoArrayOutput() DemoArrayOutput {
	return o
}

func (o DemoArrayOutput) ToDemoArrayOutputWithContext(ctx context.Context) DemoArrayOutput {
	return o
}

func (o DemoArrayOutput) Index(i pulumi.IntInput) DemoOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Demo {
		return vs[0].([]*Demo)[vs[1].(int)]
	}).(DemoOutput)
}

type DemoMapOutput struct{ *pulumi.OutputState }

func (DemoMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Demo)(nil)).Elem()
}

func (o DemoMapOutput) ToDemoMapOutput() DemoMapOutput {
	return o
}

func (o DemoMapOutput) ToDemoMapOutputWithContext(ctx context.Context) DemoMapOutput {
	return o
}

func (o DemoMapOutput) MapIndex(k pulumi.StringInput) DemoOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Demo {
		return vs[0].(map[string]*Demo)[vs[1].(string)]
	}).(DemoOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DemoInput)(nil)).Elem(), &Demo{})
	pulumi.RegisterInputType(reflect.TypeOf((*DemoArrayInput)(nil)).Elem(), DemoArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DemoMapInput)(nil)).Elem(), DemoMap{})
	pulumi.RegisterOutputType(DemoOutput{})
	pulumi.RegisterOutputType(DemoArrayOutput{})
	pulumi.RegisterOutputType(DemoMapOutput{})
}
