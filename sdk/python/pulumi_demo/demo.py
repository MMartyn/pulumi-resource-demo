# coding=utf-8
# *** WARNING: this file was generated by Pulumi SDK Generator. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from .static_page import StaticPage

__all__ = ['DemoArgs', 'Demo']

@pulumi.input_type
class DemoArgs:
    def __init__(__self__, *,
                 static_page: pulumi.Input['StaticPage']):
        """
        The set of arguments for constructing a Demo resource.
        :param pulumi.Input['StaticPage'] static_page: The static page.
        """
        pulumi.set(__self__, "static_page", static_page)

    @property
    @pulumi.getter(name="staticPage")
    def static_page(self) -> pulumi.Input['StaticPage']:
        """
        The static page.
        """
        return pulumi.get(self, "static_page")

    @static_page.setter
    def static_page(self, value: pulumi.Input['StaticPage']):
        pulumi.set(self, "static_page", value)


class Demo(pulumi.ComponentResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 static_page: Optional[pulumi.Input['StaticPage']] = None,
                 __props__=None):
        """
        Create a Demo resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input['StaticPage'] static_page: The static page.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: DemoArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Demo resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param DemoArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DemoArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 static_page: Optional[pulumi.Input['StaticPage']] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is not None:
            raise ValueError('ComponentResource classes do not support opts.id')
        else:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DemoArgs.__new__(DemoArgs)

            if static_page is None and not opts.urn:
                raise TypeError("Missing required property 'static_page'")
            __props__.__dict__["static_page"] = static_page
        super(Demo, __self__).__init__(
            'demo:index:Demo',
            resource_name,
            __props__,
            opts,
            remote=True)

